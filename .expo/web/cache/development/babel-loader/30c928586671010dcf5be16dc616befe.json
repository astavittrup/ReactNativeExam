{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport TextInput from \"react-native-web/dist/exports/TextInput\";\nimport { useState } from 'react';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\n\nvar Input = function Input(props) {\n  var _useState = useState(props.inputValue),\n      _useState2 = _slicedToArray(_useState, 2),\n      text = _useState2[0],\n      setText = _useState2[1];\n\n  var _useState3 = useState(false),\n      _useState4 = _slicedToArray(_useState3, 2),\n      entered = _useState4[0],\n      setEntered = _useState4[1];\n\n  var handleChangeText = function handleChangeText(text) {\n    setEntered(true);\n    setText(text);\n\n    if (text === '') {\n      props.setValid(false);\n    } else {\n      props.setValid(true);\n    }\n  };\n\n  var handleOnBlur = function handleOnBlur() {\n    setEntered(true);\n  };\n\n  return _jsxs(View, {\n    children: [_jsx(Text, {\n      children: props.label\n    }), _jsx(TextInput, {\n      value: text,\n      onChangeText: handleChangeText,\n      onBlur: handleOnBlur\n    }), !props.valid && entered ? _jsx(Text, {\n      children: props.error\n    }) : _jsx(_Fragment, {})]\n  });\n};\n\nexport default Input;","map":{"version":3,"names":["useState","Input","props","inputValue","text","setText","entered","setEntered","handleChangeText","setValid","handleOnBlur","label","valid","error"],"sources":["/Users/astavittrupgraversen/repo/ReactNativeExam/components/Input.jsx"],"sourcesContent":["import { View, Text, TextInput } from 'react-native';\nimport { useState } from 'react';\n\nconst Input = props => {\n    const [text, setText] = useState(props.inputValue)\n\n    const [entered, setEntered] = useState(false);\n\n    const handleChangeText = (text) => {\n        setEntered(true);\n        setText(text);\n        if (text === '') {\n            props.setValid(false);\n        } else {\n            props.setValid(true);\n        }\n    }\n    const handleOnBlur = () => {\n        setEntered(true);\n    }\n\n    return (\n        <View>\n            <Text>{props.label}</Text>\n            <TextInput value={text} onChangeText={handleChangeText} onBlur={handleOnBlur} />\n            {!props.valid && entered ? <Text>{props.error}</Text> : <></>}\n        </View>\n    );\n}\n\nexport default Input;"],"mappings":";;;;AACA,SAASA,QAAT,QAAyB,OAAzB;;;;;AAEA,IAAMC,KAAK,GAAG,SAARA,KAAQ,CAAAC,KAAK,EAAI;EACnB,gBAAwBF,QAAQ,CAACE,KAAK,CAACC,UAAP,CAAhC;EAAA;EAAA,IAAOC,IAAP;EAAA,IAAaC,OAAb;;EAEA,iBAA8BL,QAAQ,CAAC,KAAD,CAAtC;EAAA;EAAA,IAAOM,OAAP;EAAA,IAAgBC,UAAhB;;EAEA,IAAMC,gBAAgB,GAAG,SAAnBA,gBAAmB,CAACJ,IAAD,EAAU;IAC/BG,UAAU,CAAC,IAAD,CAAV;IACAF,OAAO,CAACD,IAAD,CAAP;;IACA,IAAIA,IAAI,KAAK,EAAb,EAAiB;MACbF,KAAK,CAACO,QAAN,CAAe,KAAf;IACH,CAFD,MAEO;MACHP,KAAK,CAACO,QAAN,CAAe,IAAf;IACH;EACJ,CARD;;EASA,IAAMC,YAAY,GAAG,SAAfA,YAAe,GAAM;IACvBH,UAAU,CAAC,IAAD,CAAV;EACH,CAFD;;EAIA,OACI,MAAC,IAAD;IAAA,WACI,KAAC,IAAD;MAAA,UAAOL,KAAK,CAACS;IAAb,EADJ,EAEI,KAAC,SAAD;MAAW,KAAK,EAAEP,IAAlB;MAAwB,YAAY,EAAEI,gBAAtC;MAAwD,MAAM,EAAEE;IAAhE,EAFJ,EAGK,CAACR,KAAK,CAACU,KAAP,IAAgBN,OAAhB,GAA0B,KAAC,IAAD;MAAA,UAAOJ,KAAK,CAACW;IAAb,EAA1B,GAAuD,mBAH5D;EAAA,EADJ;AAOH,CAzBD;;AA2BA,eAAeZ,KAAf"},"metadata":{},"sourceType":"module"}