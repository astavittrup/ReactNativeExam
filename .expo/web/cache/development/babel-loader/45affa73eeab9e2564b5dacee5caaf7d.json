{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport TextInput from \"react-native-web/dist/exports/TextInput\";\nimport Button from \"react-native-web/dist/exports/Button\";\nimport { useEffect, useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { restoreUser, login } from \"./../store/actions/UserActions\";\nimport * as SecureStore from 'expo-secure-store';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\n\nfunction LoginScreen(_ref) {\n  var navigation = _ref.navigation;\n\n  var _useState = useState(''),\n      _useState2 = _slicedToArray(_useState, 2),\n      email = _useState2[0],\n      setEmail = _useState2[1];\n\n  var _useState3 = useState(''),\n      _useState4 = _slicedToArray(_useState3, 2),\n      password = _useState4[0],\n      setPassword = _useState4[1];\n\n  var dispatch = useDispatch();\n\n  function load() {\n    var emailFromSecureStore, tokenFromSecureStore;\n    return _regeneratorRuntime.async(function load$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.next = 2;\n            return _regeneratorRuntime.awrap(SecureStore.getItemAsync('email'));\n\n          case 2:\n            emailFromSecureStore = _context.sent;\n            _context.next = 5;\n            return _regeneratorRuntime.awrap(SecureStore.getItemAsync('token'));\n\n          case 5:\n            tokenFromSecureStore = _context.sent;\n\n            if (emailFromSecureStore && tokenFromSecureStore) {\n              console.log(\"success\", emailFromSecureStore);\n              dispatch(restoreUser(emailFromSecureStore, tokenFromSecureStore));\n            } else {\n              console.log(\"failure\");\n            }\n\n          case 7:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  }\n\n  ;\n  return _jsxs(View, {\n    children: [_jsx(Text, {\n      children: \"Please enter your credentials to login \"\n    }), _jsx(TextInput, {\n      placeholder: \"email\",\n      onChangeText: setEmail,\n      value: email\n    }), _jsx(TextInput, {\n      placeholder: \"Password\",\n      onChangeText: setPassword,\n      value: password\n    }), _jsx(Button, {\n      title: \"Login\",\n      onPress: function onPress() {\n        return dispatch(login(email, password));\n      }\n    })]\n  });\n}\n\nexport default LoginScreen;","map":{"version":3,"names":["useEffect","useState","useDispatch","useSelector","restoreUser","login","SecureStore","LoginScreen","navigation","email","setEmail","password","setPassword","dispatch","load","getItemAsync","emailFromSecureStore","tokenFromSecureStore","console","log"],"sources":["/Users/astavittrupgraversen/repo/ReactNativeExam/screens/LoginScreen.jsx"],"sourcesContent":["import { View, Text, TextInput, Button } from 'react-native';\nimport { useEffect, useState } from 'react'\nimport { useDispatch, useSelector } from 'react-redux';\nimport { restoreUser, login } from './../store/actions/UserActions'\nimport * as SecureStore from 'expo-secure-store';\n\n\nfunction LoginScreen({ navigation }) {\n    const [email, setEmail] = useState('');\n    const [password, setPassword] = useState('');\n    const dispatch = useDispatch();\n\n    async function load() {\n        let emailFromSecureStore = await SecureStore.getItemAsync('email');\n        let tokenFromSecureStore = await SecureStore.getItemAsync('token');\n        if (emailFromSecureStore && tokenFromSecureStore) {\n            console.log(\"success\", emailFromSecureStore);\n            dispatch(restoreUser(emailFromSecureStore, tokenFromSecureStore));\n        } else {\n            console.log(\"failure\");\n        }\n    };\n\n    return (\n        <View>\n            <Text>Please enter your credentials to login </Text>\n            <TextInput placeholder='email'\n                onChangeText={setEmail}\n                value={email} />\n            <TextInput placeholder='Password'\n                onChangeText={setPassword}\n                value={password} />\n            <Button title=\"Login\" onPress={() => dispatch(login(email, password))} />\n        </View>\n    );\n}\n\nexport default LoginScreen;"],"mappings":";;;;;;AACA,SAASA,SAAT,EAAoBC,QAApB,QAAoC,OAApC;AACA,SAASC,WAAT,EAAsBC,WAAtB,QAAyC,aAAzC;AACA,SAASC,WAAT,EAAsBC,KAAtB;AACA,OAAO,KAAKC,WAAZ,MAA6B,mBAA7B;;;;AAGA,SAASC,WAAT,OAAqC;EAAA,IAAdC,UAAc,QAAdA,UAAc;;EACjC,gBAA0BP,QAAQ,CAAC,EAAD,CAAlC;EAAA;EAAA,IAAOQ,KAAP;EAAA,IAAcC,QAAd;;EACA,iBAAgCT,QAAQ,CAAC,EAAD,CAAxC;EAAA;EAAA,IAAOU,QAAP;EAAA,IAAiBC,WAAjB;;EACA,IAAMC,QAAQ,GAAGX,WAAW,EAA5B;;EAEA,SAAeY,IAAf;IAAA;IAAA;MAAA;QAAA;UAAA;YAAA;YAAA,iCACqCR,WAAW,CAACS,YAAZ,CAAyB,OAAzB,CADrC;;UAAA;YACQC,oBADR;YAAA;YAAA,iCAEqCV,WAAW,CAACS,YAAZ,CAAyB,OAAzB,CAFrC;;UAAA;YAEQE,oBAFR;;YAGI,IAAID,oBAAoB,IAAIC,oBAA5B,EAAkD;cAC9CC,OAAO,CAACC,GAAR,CAAY,SAAZ,EAAuBH,oBAAvB;cACAH,QAAQ,CAACT,WAAW,CAACY,oBAAD,EAAuBC,oBAAvB,CAAZ,CAAR;YACH,CAHD,MAGO;cACHC,OAAO,CAACC,GAAR,CAAY,SAAZ;YACH;;UARL;UAAA;YAAA;QAAA;MAAA;IAAA;EAAA;;EASC;EAED,OACI,MAAC,IAAD;IAAA,WACI,KAAC,IAAD;MAAA;IAAA,EADJ,EAEI,KAAC,SAAD;MAAW,WAAW,EAAC,OAAvB;MACI,YAAY,EAAET,QADlB;MAEI,KAAK,EAAED;IAFX,EAFJ,EAKI,KAAC,SAAD;MAAW,WAAW,EAAC,UAAvB;MACI,YAAY,EAAEG,WADlB;MAEI,KAAK,EAAED;IAFX,EALJ,EAQI,KAAC,MAAD;MAAQ,KAAK,EAAC,OAAd;MAAsB,OAAO,EAAE;QAAA,OAAME,QAAQ,CAACR,KAAK,CAACI,KAAD,EAAQE,QAAR,CAAN,CAAd;MAAA;IAA/B,EARJ;EAAA,EADJ;AAYH;;AAED,eAAeJ,WAAf"},"metadata":{},"sourceType":"module"}