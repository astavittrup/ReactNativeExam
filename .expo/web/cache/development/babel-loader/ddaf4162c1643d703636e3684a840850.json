{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport * as SecureStore from 'expo-secure-store';\nexport var SIGNUP = 'SIGNUP';\nexport var LOGIN = 'LOGIN';\nexport var RESTORE_USER = 'RESTORE_USER';\nexport var restoreUser = function restoreUser(email, token) {\n  return {\n    type: RESTORE_USER,\n    payload: {\n      email: email,\n      idToken: token\n    }\n  };\n};\nexport var signup = function signup(email, password) {\n  return function _callee(dispatch) {\n    var response, data;\n    return _regeneratorRuntime.async(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.next = 2;\n            return _regeneratorRuntime.awrap(fetch('https://identitytoolkit.googleapis.com/v1/accounts:signUp?key=AIzaSyDl9YBM32ozw7O0PP75nE52xpzWf_MZ4w4', {\n              method: 'POST',\n              headers: {\n                'Content-Type': 'application/json'\n              },\n              body: JSON.stringify({\n                email: email,\n                password: password,\n                returnSecureToken: true\n              })\n            }));\n\n          case 2:\n            response = _context.sent;\n            _context.next = 5;\n            return _regeneratorRuntime.awrap(response.json());\n\n          case 5:\n            data = _context.sent;\n            console.log(data);\n\n            if (response.ok) {\n              _context.next = 10;\n              break;\n            }\n\n            _context.next = 15;\n            break;\n\n          case 10:\n            _context.next = 12;\n            return _regeneratorRuntime.awrap(SecureStore.setItemAsync('email', data.email));\n\n          case 12:\n            _context.next = 14;\n            return _regeneratorRuntime.awrap(SecureStore.setItemAsync('token', data.idToken));\n\n          case 14:\n            dispatch({\n              type: SIGNUP,\n              payload: {\n                email: data.email,\n                idToken: data.idToken\n              }\n            });\n\n          case 15:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n};","map":{"version":3,"sources":["/Users/astavittrupgraversen/react_native/store/actions/UserActions.js"],"names":["SecureStore","SIGNUP","LOGIN","RESTORE_USER","restoreUser","email","token","type","payload","idToken","signup","password","dispatch","fetch","method","headers","body","JSON","stringify","returnSecureToken","response","json","data","console","log","ok","setItemAsync"],"mappings":";AAAA,OAAO,KAAKA,WAAZ,MAA6B,mBAA7B;AAEA,OAAO,IAAMC,MAAM,GAAG,QAAf;AACP,OAAO,IAAMC,KAAK,GAAG,OAAd;AACP,OAAO,IAAMC,YAAY,GAAG,cAArB;AAGP,OAAO,IAAMC,WAAW,GAAG,SAAdA,WAAc,CAACC,KAAD,EAAQC,KAAR,EAAkB;AACzC,SAAO;AAAEC,IAAAA,IAAI,EAAEJ,YAAR;AAAsBK,IAAAA,OAAO,EAAE;AAAEH,MAAAA,KAAK,EAALA,KAAF;AAASI,MAAAA,OAAO,EAAEH;AAAlB;AAA/B,GAAP;AACH,CAFM;AAKP,OAAO,IAAMI,MAAM,GAAG,SAATA,MAAS,CAACL,KAAD,EAAQM,QAAR,EAAqB;AACvC,SAAO,iBAAMC,QAAN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,6CACoBC,KAAK,CAAC,uGAAD,EAA0G;AAClIC,cAAAA,MAAM,EAAE,MAD0H;AAElIC,cAAAA,OAAO,EAAE;AACL,gCAAgB;AADX,eAFyH;AAKlIC,cAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAe;AAGjBb,gBAAAA,KAAK,EAAEA,KAHU;AAIjBM,gBAAAA,QAAQ,EAAEA,QAJO;AAKjBQ,gBAAAA,iBAAiB,EAAE;AALF,eAAf;AAL4H,aAA1G,CADzB;;AAAA;AACGC,YAAAA,QADH;AAAA;AAAA,6CAmBgBA,QAAQ,CAACC,IAAT,EAnBhB;;AAAA;AAmBGC,YAAAA,IAnBH;AAoBHC,YAAAA,OAAO,CAACC,GAAR,CAAYF,IAAZ;;AApBG,gBAqBEF,QAAQ,CAACK,EArBX;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA,6CAwBOzB,WAAW,CAAC0B,YAAZ,CAAyB,OAAzB,EAAkCJ,IAAI,CAACjB,KAAvC,CAxBP;;AAAA;AAAA;AAAA,6CAyBOL,WAAW,CAAC0B,YAAZ,CAAyB,OAAzB,EAAkCJ,IAAI,CAACb,OAAvC,CAzBP;;AAAA;AA0BCG,YAAAA,QAAQ,CAAC;AAAEL,cAAAA,IAAI,EAAEN,MAAR;AAAgBO,cAAAA,OAAO,EAAE;AAAEH,gBAAAA,KAAK,EAAEiB,IAAI,CAACjB,KAAd;AAAqBI,gBAAAA,OAAO,EAAEa,IAAI,CAACb;AAAnC;AAAzB,aAAD,CAAR;;AA1BD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAP;AA6BH,CA9BM","sourcesContent":["import * as SecureStore from 'expo-secure-store';\n\nexport const SIGNUP = 'SIGNUP';\nexport const LOGIN = 'LOGIN';\nexport const RESTORE_USER = 'RESTORE_USER';\n\n\nexport const restoreUser = (email, token) => {\n    return { type: RESTORE_USER, payload: { email, idToken: token } };\n};\n\n\nexport const signup = (email, password) => {\n    return async dispatch => {\n        const response = await fetch('https://identitytoolkit.googleapis.com/v1/accounts:signUp?key=AIzaSyDl9YBM32ozw7O0PP75nE52xpzWf_MZ4w4', {\n            method: 'POST',\n            headers: {\n                'Content-Type': 'application/json'\n            },\n            body: JSON.stringify({ //javascript to json\n                //key value pairs of data you want to send to server\n                // ...\n                email: email,\n                password: password,\n                returnSecureToken: true\n            })\n        });\n\n        \n\n        // console.log(await response.json());\n\n        const data = await response.json(); // json to javascript\n        console.log(data);\n        if (!response.ok) {\n            //There was a problem..\n        } else {\n            await SecureStore.setItemAsync('email', data.email);\n            await SecureStore.setItemAsync('token', data.idToken);\n            dispatch({ type: SIGNUP, payload: { email: data.email, idToken: data.idToken } })\n        }\n    };\n};\n"]},"metadata":{},"sourceType":"module"}