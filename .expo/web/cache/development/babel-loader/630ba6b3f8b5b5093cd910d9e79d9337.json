{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport TextInput from \"react-native-web/dist/exports/TextInput\";\nimport Button from \"react-native-web/dist/exports/Button\";\nimport { useEffect, useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { restoreUser, signup } from \"./../store/actions/UserActions\";\nimport * as SecureStore from 'expo-secure-store';\nimport { useNavigation } from '@react-navigation/native';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\n\nvar LoginScreen = function LoginScreen(_ref) {\n  var navigation = _ref.navigation;\n\n  var _useState = useState(''),\n      _useState2 = _slicedToArray(_useState, 2),\n      email = _useState2[0],\n      setEmail = _useState2[1];\n\n  var _useState3 = useState(''),\n      _useState4 = _slicedToArray(_useState3, 2),\n      password = _useState4[0],\n      setPassword = _useState4[1];\n\n  var dispatch = useDispatch();\n\n  function load() {\n    var emailFromSecureStore, tokenFromSecureStore;\n    return _regeneratorRuntime.async(function load$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.next = 2;\n            return _regeneratorRuntime.awrap(SecureStore.getItemAsync('email'));\n\n          case 2:\n            emailFromSecureStore = _context.sent;\n            _context.next = 5;\n            return _regeneratorRuntime.awrap(SecureStore.getItemAsync('token'));\n\n          case 5:\n            tokenFromSecureStore = _context.sent;\n\n            if (emailFromSecureStore && tokenFromSecureStore) {\n              console.log(\"success\", emailFromSecureStore);\n              dispatch(restoreUser(emailFromSecureStore, tokenFromSecureStore));\n            } else {\n              console.log(\"failure\");\n            }\n\n          case 7:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  }\n\n  useEffect(function () {}, []);\n  return _jsxs(View, {\n    children: [_jsx(Text, {\n      children: \"Login\"\n    }), _jsx(TextInput, {\n      placeholder: \"Email\",\n      onChangeText: setEmail,\n      value: email\n    }), _jsx(TextInput, {\n      placeholder: \"Password\",\n      onChangeText: setPassword,\n      value: password\n    }), _jsx(Button, {\n      title: \"Login\",\n      onPress: function onPress() {\n        return navigation.navigate(\"AndreScreen\");\n      }\n    })]\n  });\n};\n\nexport default LoginScreen;","map":{"version":3,"sources":["/Users/astavittrupgraversen/react_native/screens/LoginScreen.jsx"],"names":["useEffect","useState","useDispatch","useSelector","restoreUser","signup","SecureStore","useNavigation","LoginScreen","navigation","email","setEmail","password","setPassword","dispatch","load","getItemAsync","emailFromSecureStore","tokenFromSecureStore","console","log","navigate"],"mappings":";;;;;;AACA,SAASA,SAAT,EAAoBC,QAApB,QAAoC,OAApC;AACA,SAASC,WAAT,EAAsBC,WAAtB,QAAyC,aAAzC;AACA,SAASC,WAAT,EAAsBC,MAAtB;AACA,OAAO,KAAKC,WAAZ,MAA6B,mBAA7B;AACA,SAASC,aAAT,QAA8B,0BAA9B;;;;AAEA,IAAMC,WAAW,GAAG,SAAdA,WAAc,OAAoB;AAAA,MAAjBC,UAAiB,QAAjBA,UAAiB;;AACpC,kBAA0BR,QAAQ,CAAC,EAAD,CAAlC;AAAA;AAAA,MAAOS,KAAP;AAAA,MAAcC,QAAd;;AACA,mBAAgCV,QAAQ,CAAC,EAAD,CAAxC;AAAA;AAAA,MAAOW,QAAP;AAAA,MAAiBC,WAAjB;;AACA,MAAMC,QAAQ,GAAGZ,WAAW,EAA5B;;AAGA,WAAea,IAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,6CACqCT,WAAW,CAACU,YAAZ,CAAyB,OAAzB,CADrC;;AAAA;AACQC,YAAAA,oBADR;AAAA;AAAA,6CAEqCX,WAAW,CAACU,YAAZ,CAAyB,OAAzB,CAFrC;;AAAA;AAEQE,YAAAA,oBAFR;;AAGI,gBAAID,oBAAoB,IAAIC,oBAA5B,EAAkD;AAC9CC,cAAAA,OAAO,CAACC,GAAR,CAAY,SAAZ,EAAuBH,oBAAvB;AAEAH,cAAAA,QAAQ,CAACV,WAAW,CAACa,oBAAD,EAAuBC,oBAAvB,CAAZ,CAAR;AAEH,aALD,MAKO;AACHC,cAAAA,OAAO,CAACC,GAAR,CAAY,SAAZ;AACH;;AAVL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAaApB,EAAAA,SAAS,CAAC,YAAM,CAEf,CAFQ,EAEN,EAFM,CAAT;AAKA,SACI,MAAC,IAAD;AAAA,eACI,KAAC,IAAD;AAAA;AAAA,MADJ,EAEI,KAAC,SAAD;AAAW,MAAA,WAAW,EAAC,OAAvB;AACI,MAAA,YAAY,EAAEW,QADlB;AAEI,MAAA,KAAK,EAAED;AAFX,MAFJ,EAMI,KAAC,SAAD;AAAW,MAAA,WAAW,EAAC,UAAvB;AACI,MAAA,YAAY,EAAEG,WADlB;AAEI,MAAA,KAAK,EAAED;AAFX,MANJ,EAWI,KAAC,MAAD;AAAQ,MAAA,KAAK,EAAC,OAAd;AAAsB,MAAA,OAAO,EAAE;AAAA,eAAMH,UAAU,CAACY,QAAX,CAAoB,aAApB,CAAN;AAAA;AAA/B,MAXJ;AAAA,IADJ;AAeH,CAvCD;;AAmDA,eAAeb,WAAf","sourcesContent":["import { View, Text, TextInput, Button } from 'react-native';\nimport { useEffect, useState } from 'react'\nimport { useDispatch, useSelector } from 'react-redux';\nimport { restoreUser, signup } from './../store/actions/UserActions'\nimport * as SecureStore from 'expo-secure-store';\nimport { useNavigation } from '@react-navigation/native';\n\nconst LoginScreen = ({ navigation }) => {\n    const [email, setEmail] = useState('')\n    const [password, setPassword] = useState('')\n    const dispatch = useDispatch()\n\n\n    async function load() {\n        let emailFromSecureStore = await SecureStore.getItemAsync('email');\n        let tokenFromSecureStore = await SecureStore.getItemAsync('token');\n        if (emailFromSecureStore && tokenFromSecureStore) {\n            console.log(\"success\", emailFromSecureStore);\n\n            dispatch(restoreUser(emailFromSecureStore, tokenFromSecureStore));\n\n        } else {\n            console.log(\"failure\");\n        }\n    }\n\n    useEffect(() => {\n        // load(); // uncomment to read from secure store\n    }, [])\n\n\n    return (\n        <View>\n            <Text>Login</Text>\n            <TextInput placeholder='Email'\n                onChangeText={setEmail}\n                value={email} />\n\n            <TextInput placeholder='Password'\n                onChangeText={setPassword}\n                value={password} />\n\n       \n            <Button title=\"Login\" onPress={() => navigation.navigate(\"AndreScreen\")} />\n        </View>\n    );\n}\n\n\n// const LoginScreen = ({ navigation }) => {\n\n//     return (\n//         <View>\n//             <Text>I am Login!</Text>\n//         </View>\n//     );\n// }\n\nexport default LoginScreen;"]},"metadata":{},"sourceType":"module"}